/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2019 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
class UiMediaSoupV2WebRtcClient extends UiComponent {
	Object initialPlaybackOrPublishParams;

	Float displayAreaAspectRatio = 4/3f;  // width / height. Makes the display always use this aspect ratio. If null, use 100% of available space

	boolean activityLineVisible;
	UiColor activityInactiveColor;
	UiColor activityActiveColor;
	boolean active;

	String icon;
	String caption;
	String noVideoImageUrl;

	command update(UiMediaSoupV2WebRtcClient config);
	command setActive(boolean active);

	command publish(UiMediaSoupPublishingParameters parameters);
	command playback(UiMediaSoupPlaybackParamaters parameters);
	command stop();

	// TODO set playback profile...

	event playbackProfileChanged(UiMulticastPlaybackProfile profile);
	event voiceActivityChanged(boolean active);
	event clicked();

	static command hasWebCam() returns boolean;
	static command isChromeExtensionInstalled() returns boolean;
}

class UiMediaSoupV3WebRtcClient extends UiComponent {

	Object initialPlaybackOrPublishParams;

	Float displayAreaAspectRatio = 4/3f;  // width / height. Makes the display always use this aspect ratio. If null, use 100% of available space

	boolean activityLineVisible;
	UiColor activityInactiveColor;
	UiColor activityActiveColor;
	boolean active;

	String icon;
	String caption;
	String noVideoImageUrl;

	command setActive(boolean active);

	command publish(UiMediaSoupPublishingParameters parameters);
	command playback(UiMediaSoupPlaybackParamaters parameters);
	command stop();

	event voiceActivityChanged(boolean active);
	event clicked();

	static command hasWebCam() returns boolean;
	static command isChromeExtensionInstalled() returns boolean;
}

enum UiMulticastPlaybackProfile {
	HIGH,
	MEDIUM,
	LOW
}

class UiMediaSoupPublishingParameters {
	String serverAdress;
	int serverPort;
	String uid;
	String token;

	UiAudioTrackConstraints audioConstraints;
	UiVideoTrackConstraints videoConstraints;
	UiScreenSharingConstraints screenSharingConstraints;

	long minBitrate;
	long maxBitrate;

}

class UiMediaSoupPlaybackParamaters {
	String serverAdress;
	int serverPort;
	String uid;
	boolean audio;
	boolean video;
	long minBitrate;
	long maxBitrate;
}

class UiAudioTrackConstraints {
    int channelCount = 1;
    boolean autoGainControl = true;
    boolean echoCancellation = true;
    boolean noiseSuppression = true;
}

class UiVideoTrackConstraints {
    Double aspectRatio;
	Integer width;
	Integer height;
    UiVideoFacingMode facingMode = UiVideoFacingMode.USER;
    double frameRate = 20;
}

class UiScreenSharingConstraints {
	Integer maxWidth;
	Integer maxHeight;
}

enum UiVideoFacingMode {
	USER, // The video source is facing toward the user; this includes, for example, the front-facing camera on a smartphone.
	ENVIRONMENT, // The video source is facing away from the user, thereby viewing their environment. This is the back camera on a smartphone.
	LEFT, // The video source is facing toward the user but to their left, such as a camera aimed toward the user but over their left shoulder.
	RIGHT; // The video source is facing toward the user but to their right, such as a camera aimed toward the user but over their right shoulder.
}
