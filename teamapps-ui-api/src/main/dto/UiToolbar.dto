/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2020 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
abstract class AbstractUiToolContainer extends UiComponent {
	required List<UiToolbarButtonGroup> leftButtonGroups; // horizontally aligned (no flow)
	required List<UiToolbarButtonGroup> rightButtonGroups; // horizontally aligned (no flow)
	UiColor backgroundColor = new UiColor(255, 255, 255).setAlpha(0.84f);

	command setButtonVisible(String groupId, String buttonId, boolean visible);
	command setButtonColors(String groupId, String buttonId, UiColor backgroundColor, UiColor hoverBackgroundColor);
	command setButtonGroupVisible(String groupId, boolean visible);
	command addButton(String groupId, UiToolbarButton button, String neighborButtonId, boolean beforeNeighbor); //if neighborButtonId is empty, add at last position
	command removeButton(String groupId, String buttonId);
	command addButtonGroup(UiToolbarButtonGroup group, boolean rightSide);
	command removeButtonGroup(String groupId);
	
	command setButtonHasDropDown(String groupId, String buttonId, boolean hasDropDown);
	command setDropDownComponent(String groupId, String buttonId, UiComponent* component);

	event toolbarButtonClick(String groupId, String buttonId, UiDropDownButtonClickInfo dropDownClickInfo); // dropDownInfo is null for non-dropdown buttons!
	event toolbarDropDownItemClick(String groupId, String buttonId, String dropDownGroupId, Object dropDownItemId);
}

enum UiToolbarButtonGroupPosition {
	FIRST, RATHER_FIRST, CENTER, RATHER_LAST, LAST
}

class UiToolbar extends AbstractUiToolContainer {
	String logoImage;

	command setLogoImage(String logoImage);
}

class UiToolAccordion extends AbstractUiToolContainer {
	// no added funcionality...
}

class UiToolbarButtonGroup {
	required String groupId;
	required List<UiToolbarButton> buttons;
	UiToolbarButtonGroupPosition position = UiToolbarButtonGroupPosition.CENTER;
	boolean visible = true;
	boolean showGroupSeparator; // separator on the RIGHT side!!
	UiToolbarButton collapsedButton;  //displayed if group is inside a drop down list or toolbar is too small an group is condensed to a single button
}

class UiToolbarButton {
	required String buttonId;
	required UiTemplate template;
	boolean visible = true;
	required Object recordData;
	String togglesFullScreenOnComponent; // If this is set, this button makes the specified component enter fullscreen. The button still sends events to the server.
	String openNewTabWithUrl; // If this is set, when the user clicks this button, the specified URL is navigated to in a new tab. The button still sends events to the server.
	boolean hasDropDown;
	UiComponent* dropDownComponent;
	int dropDownPanelWidth = 450;

	UiColor backgroundColor;
	UiColor hoverBackgroundColor;
}

@TypeScriptFactory
class UiDropDownButtonClickInfo {
	required boolean isOpening;
	required boolean isContentSet;
}
