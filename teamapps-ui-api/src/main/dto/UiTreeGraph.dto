class UiTreeGraph extends UiComponent {
    List<UiTreeGraphNode> nodes;

	UiColor backgroundColor = new UiColor(0, 0, 0).setAlpha(0);
    float zoomFactor = 1;
    boolean compact;

    command update(UiTreeGraph config);

    command setZoomFactor(float zoomFactor); // > 0
    command setNodes(List<UiTreeGraphNode> nodes);
    command addNode(UiTreeGraphNode node);
    command removeNode(String nodeId);
    command setNodeExpanded(String nodeId, boolean expanded);

    command moveToRootNode();
    command moveToNode(String nodeId);

    event nodeClicked(String nodeId);
    event nodeExpandedOrCollapsed(String nodeId, boolean expanded, boolean lazyLoad);
    event sideListExpandedOrCollapsed(String nodeId, boolean expanded);
    event parentExpandedOrCollapsed(String nodeId, boolean expanded);
}

class UiBaseTreeGraphNode {
	required String id;
    required int width;
    required int height;
    UiColor backgroundColor = new UiColor(255, 255, 255); // rgba
    UiColor borderColor = new UiColor(100, 100, 100); // rgba
    float borderWidth = 1;
    float borderRadius = 0;

    UiTreeGraphNodeImage image;
    UiTreeGraphNodeIcon icon;

    UiTemplate template;     // will get embedded using foreignObject
    UiClientRecord record;   // will get embedded using foreignObject

    UiColor connectorLineColor = new UiColor(100, 100, 100); // line to parent node
    int connectorLineWidth;
    String dashArray;
}

class UiTreeGraphNode extends UiBaseTreeGraphNode{
    String parentId;
    boolean parentCollapsible = false;

    boolean expanded;
    boolean hasLazyChildren = false;

    List<UiBaseTreeGraphNode> sideListNodes;
    boolean sideListExpanded;
}

class UiTreeGraphNodeImage {
    required String url;
    required int width;
    required int height;
    int centerTopDistance; //top distance of image center from top-left corner of node, e.g. -10 and height 30 means image will be 25 pixels above the top line of the node
    int centerLeftDistance; //left distance of image center from top-left corner of node
    enum { ORIGINAL, ROUNDED, CIRCLE } cornerShape = CornerShape.ROUNDED;
    boolean shadow = false;
    float borderWidth = 0;
    UiColor borderColor = new UiColor(100, 100, 100);
}

class UiTreeGraphNodeIcon {
    required String icon;
    required int size; //width = height
}
