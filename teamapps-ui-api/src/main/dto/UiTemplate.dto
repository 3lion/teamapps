/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2019 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
interface UiTemplate {

}

class UiTemplateReference implements UiTemplate {
	required String templateId;
}

class UiTextCellTemplate implements UiTemplate {
	UiImageTemplate imageTemplate;
	String imagePropertyName;
	UiIconPosition iconPosition = UiIconPosition.LEFT_MIDDLE;
	int imageSpacing = 0;
	int horizontalPadding = 2;
	int verticalPadding = 2;
	required List<UiTextCellTemplateElement> textElements;
	int minHeight;
	int maxHeight;
	enum {
		JUSTIFY_TOP,
		JUSTIFY_CENTER,
		JUSTIFY_CENTER_OVERFLOW_BOTTOM
	} justifyLines = JustifyLines.JUSTIFY_CENTER_OVERFLOW_BOTTOM;
}

abstract class UiTextCellTemplateElement {
	required int line; //starting with 0 (y-coordinate)
	required int elementIndex; //starting with 0; (x-coordinate)
	required String propertyName; //the name of the property in the record
	enum {LEFT, CENTERED, RIGHT} align = Align.LEFT;
	int marginTop;
	int marginLeft;
	int marginBottom;
	int marginRight;
}


class UiTextCellTemplateTextElement extends UiTextCellTemplateElement {
	String color; //if color is empty use default color
	boolean bold;
	boolean underline;
	boolean italic;
	boolean badge;
	boolean noWrap; // if true: no line wrapping
	String badgeColorProperty; // badge color is determined as follows: evaluate(badgeColorProperty) || color || a decent blue
	float fontSize = 1; // relative to the default font size
	float lineHeight = 1.1f; // relative to the font size (!!)
	boolean noHorizontalSpace; //if true, text elements are concatenated without space in between
}

class UiTextCellTemplateImageElement extends UiTextCellTemplateElement {
	required UiImageTemplate imageTemplate;
}

class UiImageTemplate { //if value starts with 'icon:', then use icon path of the config (e.g. icons-path/empty-value)
	required UiImageFormatting defaultFormatting;
	UiImageFormatting iconFormatting; //if not set use defaultFormatting
	String emptyImage;
}

class UiImageFormatting {
	int width; //if width AND height are 0 use the actual image width
	int height; //if width AND height are 0 use the actual image height
	enum { ORIGINAL, ROUNDED, CIRCLE } cornerShape = CornerShape.ROUNDED;
	boolean shadow = false;
	float borderWidth = 0;
	String borderColor;
}

enum UiIconPosition {TOP_LEFT, TOP_CENTER, TOP_RIGHT, LEFT_TOP, LEFT_MIDDLE, LEFT_BOTTOM, RIGHT_TOP, RIGHT_MIDDLE, RIGHT_BOTTOM}

